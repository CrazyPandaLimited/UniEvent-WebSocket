MODULE = Panda::WebSocket::Server                PACKAGE = Panda::WebSocket::Client
PROTOTYPES: DISABLE

BOOT {
    xs::register_package(aTHX_ "Panda::WebSocket::Client", "Panda::WebSocket::Server");
    xs::inherit_package(aTHX_ "Panda::WebSocket::Client", "Panda::Event::TCP");
}

panda::websocket::Client* panda::websocket::Client::new (panda::event::Loop* loop = panda::event::Loop::default_loop()) {
    RETVAL = new Client(loop);
}

void panda::websocket::Client::close(uint16_t code)

void panda::websocket::Client::connect(panda::websocket::ConnectRequestSP request, bool secure, uint16_t port)

void panda::websocket::Client::send_message(string payload)

void panda::websocket::Client::send_text(string payload)

xs::lib::NativeCallbackDispatcher* panda::websocket::Client::connect_callback() {
    const char* CLASS = "Panda::Lib::NativeCallbackDispatcher";

    function<SvIntrPtr(shared_ptr<panda::websocket::Client>)> client_caster = [](shared_ptr<panda::websocket::Client> c) {
        return SvMortalPtr(typemap_outcast<panda::websocket::Client*, const char* CLASS>(c, "Panda::WebSocket::Client"));
    };
    function<SvIntrPtr(panda::websocket::ConnectResponseSP)> req_caster = [](panda::websocket::ConnectResponseSP req) {
        return SvMortalPtr(typemap_outcast<panda::websocket::ConnectResponseSP, const char* CLASS>(req, "Panda::WebSocket::ConnectResponse"));
    };

    RETVAL = NativeCallbackDispatcher::create(THIS->connect_callback,
                                              std::make_tuple(client_caster, nullptr),
                                              std::make_tuple(req_caster, nullptr));
}

xs::lib::NativeCallbackDispatcher* panda::websocket::Client::message_callback() {
    const char* CLASS = "Panda::Lib::NativeCallbackDispatcher";

    function<SvIntrPtr(shared_ptr<panda::websocket::BaseConnection>)> client_caster = [](shared_ptr<panda::websocket::BaseConnection> base) {
        auto c = panda::dynamic_pointer_cast<panda::websocket::Client>(base);
        return SvMortalPtr(typemap_outcast<panda::websocket::Client*, const char* CLASS>(c, "Panda::WebSocket::Client"));
    };
    function<SvIntrPtr(panda::websocket::MessageSP)> msg_caster = [](panda::websocket::MessageSP msg) {
        return SvMortalPtr(typemap_outcast<panda::websocket::MessageSP, const char* CLASS>(msg, "Panda::WebSocket::Message"));
    };

    RETVAL = NativeCallbackDispatcher::create(THIS->message_callback,
                                              std::make_tuple(client_caster, nullptr),
                                              std::make_tuple(msg_caster, nullptr));
}

xs::lib::NativeCallbackDispatcher* panda::websocket::Client::stream_error_callback() {
    const char* CLASS = "Panda::Lib::NativeCallbackDispatcher";

    function<SvIntrPtr(shared_ptr<panda::websocket::BaseConnection>)> client_caster = [](shared_ptr<panda::websocket::BaseConnection> base) {
        auto c = panda::dynamic_pointer_cast<panda::websocket::Client>(base);
        return SvMortalPtr(typemap_outcast<panda::websocket::Client*, const char* CLASS>(c, "Panda::WebSocket::Client"));
    };
    function<SvIntrPtr(const panda::event::StreamError&)> err_caster = [](const panda::event::StreamError& err) {
        return SvMortalPtr(error_sv(err));
    };

    RETVAL = NativeCallbackDispatcher::create(THIS->stream_error_callback,
                                              std::make_tuple(client_caster, nullptr),
                                              std::make_tuple(err_caster, nullptr));
}


void panda::websocket::Client::DESTROY () {}

