MODULE = Panda::WebSocket::Server                PACKAGE = Panda::WebSocket::Client
PROTOTYPES: DISABLE

BOOT {
    Stash client_stash("Panda::WebSocket::Client");
    client_stash.mark_as_loaded(main_stash);
    client_stash.inherit(base_connection_stash);
}

Client* new (SV* CLASS, Loop* loop = Loop::default_loop()) {
    RETVAL = new Client(loop);
    PROTO = Stash::from_name(CLASS).bless();
}

void Client::connect (ConnectRequestSP request, bool secure, uint16_t port)

NativeCallbackDispatcher* Client::connect_callback () {
    function<Sv(ClientSP)> client_caster = [](ClientSP c) { return xs::out(c.get()); };
    function<Sv(ConnectResponseSP)> req_caster = [](ConnectResponseSP req) { return xs::out(req); };
    RETVAL = NativeCallbackDispatcher::create(THIS->connect_callback,
                                              std::make_tuple(client_caster, nullptr),
                                              std::make_tuple(req_caster, nullptr));
}

NativeCallbackDispatcher* Client::message_callback () {
    function<Sv(BaseConnectionSP)> client_caster = [](BaseConnectionSP base) {
        auto c = panda::dynamic_pointer_cast<Client>(base);
        return xs::out(c.get());
    };
    function<Sv(MessageSP)> msg_caster = [](MessageSP msg) { return xs::out(msg); };
    RETVAL = NativeCallbackDispatcher::create(THIS->message_callback,
                                              std::make_tuple(client_caster, nullptr),
                                              std::make_tuple(msg_caster, nullptr));
}

NativeCallbackDispatcher* Client::stream_error_callback () {
    function<Sv(BaseConnectionSP)> client_caster = [](BaseConnectionSP base) {
        auto c = panda::dynamic_pointer_cast<Client>(base);
        return xs::out(c.get());
    };
    function<Sv(const panda::event::StreamError&)> err_caster = [](const panda::event::StreamError& err) { return error_sv(err); };
    RETVAL = NativeCallbackDispatcher::create(THIS->stream_error_callback,
                                              std::make_tuple(client_caster, nullptr),
                                              std::make_tuple(err_caster, nullptr));
}