MODULE = Panda::WebSocket::Server                PACKAGE = Panda::WebSocket::Server
PROTOTYPES: DISABLE

xs::websocket::server::XSServer* panda::websocket::server::Server::new (HV* hvcfg, panda::event::Loop* loop = panda::event::Loop::default_loop()) {
    PXS_TRY({
        RETVAL = new XSServer(loop);
        RETVAL->init(XSServer::make_server_config(hvcfg));
    });
}

panda::event::Loop* panda::websocket::server::Server::loop () {
    const char* CLASS = "Panda::Event::Loop";
    RETVAL = THIS->loop();
}

void panda::websocket::server::Server::run () {
    PXS_TRY({
        THIS->run();
    });
}

void panda::websocket::server::Server::stop () {
    PXS_TRY({
        THIS->stop();
    });
}

xs::lib::NativeCallbackDispatcher* panda::websocket::server::Server::connection_callback () {
    const char* CLASS = "Panda::Lib::NativeCallbackDispatcher";

    function<SV*(shared_ptr<panda::websocket::server::Server>)> serv_caster = [](shared_ptr<panda::websocket::server::Server> s) {
        return sv_2mortal(typemap_outcast<panda::websocket::server::Server*, const char* CLASS>(s, "Panda::WebSocket::Server"));
    };
    function<SV*(shared_ptr<panda::websocket::server::Connection>)> conn_caster = [](shared_ptr<panda::websocket::server::Connection> c) {
        return sv_2mortal(typemap_outcast<panda::websocket::server::Connection*, const char* CLASS>(c, "Panda::WebSocket::Server::Connection"));
    };

    RETVAL = NativeCallbackDispatcher::create(THIS->connection_callback,
                                              std::make_tuple(serv_caster, nullptr),
                                              std::make_tuple(conn_caster, nullptr));
}

xs::lib::NativeCallbackDispatcher* panda::websocket::server::Server::disconnection_callback () {
    const char* CLASS = "Panda::Lib::NativeCallbackDispatcher";

    function<SV*(shared_ptr<panda::websocket::server::Server>)> server_caster = [](shared_ptr<panda::websocket::server::Server> s) {
        return sv_2mortal(typemap_outcast<panda::websocket::server::Server*, const char* CLASS>(s, "Panda::WebSocket::Server"));
    };
    function<SV*(shared_ptr<panda::websocket::server::Connection>)> conn_caster = [](shared_ptr<panda::websocket::server::Connection> c) {
        return sv_2mortal(typemap_outcast<panda::websocket::server::Connection*, const char* CLASS>(c, "Panda::WebSocket::Server::Connection"));
    };

    function<SV*(uint16_t)> code_caster = [](uint16_t code) {
        return sv_2mortal(newSVuv(code));
    };
    function<SV*(string)> payload_caster = [](string payload) {
        return sv_2mortal(newSVpvn(payload.data(), payload.size()));
    };

    RETVAL = NativeCallbackDispatcher::create(THIS->disconnection_callback,
                                              std::make_tuple(server_caster, nullptr),
                                              std::make_tuple(conn_caster, nullptr),
                                              std::make_tuple(code_caster, nullptr),
                                              std::make_tuple(payload_caster, nullptr));
}

void panda::websocket::server::Server::DESTROY () {}
