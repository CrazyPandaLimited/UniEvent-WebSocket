MODULE = Panda::WebSocket::Server                PACKAGE = Panda::WebSocket::Server
PROTOTYPES: DISABLE

Server* new (SV* CLASS, Hash hvcfg, Loop* loop = Loop::default_loop()) {
    RETVAL = new XSServer(loop);
    RETVAL->init(XSServer::make_server_config(hvcfg));
    PROTO = Stash::from_name(CLASS).bless();
}

Loop* Server::loop () {
    RETVAL = THIS->loop();
}

void Server::run ()

void Server::stop ()

void Server::start_listening ()

void Server::stop_listening ()

NativeCallbackDispatcher* Server::connection_callback () {
    function<SvIPtr(ServerSP)>     serv_caster = [](ServerSP     s) { return xs::out(s.get()); };
    function<SvIPtr(ConnectionSP)> conn_caster = [](ConnectionSP c) { return xs::out(c.get()); };
    RETVAL = NativeCallbackDispatcher::create(THIS->connection_callback,
                                              std::make_tuple(serv_caster, nullptr),
                                              std::make_tuple(conn_caster, nullptr));
}

NativeCallbackDispatcher* Server::disconnection_callback () {
    function<SvIPtr(ServerSP)>     server_caster  = [](ServerSP s)     { return xs::out(s.get()); };
    function<SvIPtr(ConnectionSP)> conn_caster    = [](ConnectionSP c) { return xs::out(c.get()); };
    function<SvIPtr(uint16_t)>     code_caster    = [](uint16_t code)  { return Simple(code); };
    function<SvIPtr(string)>       payload_caster = [](string payload) { return Simple(string_view(payload.data(), payload.size())); };
    RETVAL = NativeCallbackDispatcher::create(THIS->disconnection_callback,
                                              std::make_tuple(server_caster, nullptr),
                                              std::make_tuple(conn_caster, nullptr),
                                              std::make_tuple(code_caster, nullptr),
                                              std::make_tuple(payload_caster, nullptr));
}
