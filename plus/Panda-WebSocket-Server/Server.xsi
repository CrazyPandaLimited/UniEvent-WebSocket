MODULE = Panda::WebSocket::Server                PACKAGE = Panda::WebSocket::Server
PROTOTYPES: DISABLE

xs::websocket::server::XSServer* panda::websocket::server::Server::new (HV* hvcfg, panda::event::Loop* loop = panda::event::Loop::default_loop()) {
    PXS_TRY({
        RETVAL = new XSServer(loop);
        RETVAL->connection_class = gv_stashpv("Panda::WebSocket::Server::Connection", GV_ADD);
        RETVAL->init(XSServer::make_server_config(hvcfg));
    });
}

const char* xs::websocket::server::XSServer::connection_class (const char* conn_class = NULL) {
    if (items > 1) {
        THIS->connection_class = gv_stashpv(conn_class, GV_ADD);
        XSRETURN_UNDEF;
    }
    RETVAL = HvNAME(THIS->connection_class);
}

panda::event::Loop* panda::websocket::server::Server::loop () {
    const char* CLASS = "Panda::Event::Loop";
    RETVAL = THIS->loop();
}

void panda::websocket::server::Server::run () {
    PXS_TRY({
        THIS->run();
    });
}

void panda::websocket::server::Server::stop () {
    PXS_TRY({
        THIS->stop();
    });
}

void panda::websocket::server::Server::connection_callback (CV* cb) {
    xs::SvIntrPtr cb_ptr(cb);
    using Event = decltype(THIS->connection_callback)::Event;
    THIS->connection_callback.add([cb_ptr](Event&, Server* server, Connection* conn) {
        XSServer* xs_server = panda::dyn_cast<XSServer*>(server);
        HV* conn_class = xs_server ? xs_server->connection_class.get<HV>() : gv_stashpv("Panda::Websocket::Server::Connection", GV_ADD);
        SV* arg = sv_2mortal(typemap_outcast<panda::websocket::server::Connection*, HV* CLASS>(conn, conn_class));
        xs::call_sub_void(cb_ptr.get<CV>(), &arg, 1);
    });
}

void panda::websocket::server::Server::disconnection_callback (CV* cb) {
    xs::SvIntrPtr cb_ptr(cb);
    using Event = decltype(THIS->disconnection_callback)::Event;
    THIS->disconnection_callback.add([cb_ptr](Event&, Server* server, Connection* conn, uint16_t code, string payload) {
        XSServer* xs_server = panda::dyn_cast<XSServer*>(server);
        HV* conn_class = xs_server ? xs_server->connection_class.get<HV>() : gv_stashpv("Panda::WebSocket::Server::Connection", GV_ADD);
        std::array<SV*, 3> args = {
            sv_2mortal(typemap_outcast<panda::websocket::server::Connection*, HV* CLASS>(conn, conn_class)),
            sv_2mortal(newSVuv(code)),
            sv_2mortal(newSVpvn(payload.data(), payload.size()))
        };
        xs::call_sub_void(cb_ptr.get<CV>(), &args[0], args.size());
    });
}

void panda::websocket::server::Server::DESTROY () {}
