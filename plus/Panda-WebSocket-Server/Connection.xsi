MODULE = Panda::WebSocket::Server                PACKAGE = Panda::WebSocket::Server::Connection
PROTOTYPES: DISABLE

BOOT {
    xs::register_package(aTHX_ "Panda::WebSocket::Server::Connection", "Panda::WebSocket::Server");
    xs::inherit_package(aTHX_ "Panda::WebSocket::Server::Connection", "Panda::Event::TCP");
}

panda::websocket::server::Connection* panda::websocket::server::Connection::new(panda::websocket::server::Server* server) {
    RETVAL = new panda::websocket::server::Connection(server, 0);
}

uint64_t panda::websocket::server::Connection::id()

void panda::websocket::server::Connection::send_message(string payload)

void panda::websocket::server::Connection::send_text(string payload)

xs::lib::NativeCallbackDispatcher* panda::websocket::server::Connection::accept_callback() {
    const char* CLASS = "Panda::Lib::NativeCallbackDispatcher";

    function<SV*(shared_ptr<panda::websocket::server::Connection>)> conn_caster = [](shared_ptr<panda::websocket::server::Connection> c) {
        return sv_2mortal(typemap_outcast<panda::websocket::server::Connection*, const char* CLASS>(c, "Panda::WebSocket::Server::Connection"));
    };
    function<SV*(panda::websocket::ConnectRequestSP)> req_caster = [](panda::websocket::ConnectRequestSP req) {
        return sv_2mortal(typemap_outcast<panda::websocket::ConnectRequestSP, const char* CLASS>(req, "Panda::WebSocket::ConnectRequest"));
    };

    RETVAL = NativeCallbackDispatcher::create(THIS->accept_callback,
                                              std::make_tuple(conn_caster, nullptr),
                                              std::make_tuple(req_caster, nullptr));
}

xs::lib::NativeCallbackDispatcher*  panda::websocket::server::Connection::message_callback() {
    const char* CLASS = "Panda::Lib::NativeCallbackDispatcher";

    function<SV*(shared_ptr<panda::websocket::BaseConnection>)> conn_caster = [](shared_ptr<panda::websocket::BaseConnection> base) {
        auto c = panda::dynamic_pointer_cast<panda::websocket::server::Connection>(base);
        return sv_2mortal(typemap_outcast<panda::websocket::server::Connection*, const char* CLASS>(c, "Panda::WebSocket::Server::Connection"));
    };
    function<SV*(panda::websocket::MessageSP)> msg_caster = [](panda::websocket::MessageSP msg) {
        return sv_2mortal(typemap_outcast<panda::websocket::MessageSP, const char* CLASS>(msg, "Panda::WebSocket::Message"));
    };

    RETVAL = NativeCallbackDispatcher::create(THIS->message_callback,
                                              std::make_tuple(conn_caster, nullptr),
                                              std::make_tuple(msg_caster, nullptr));
}

xs::lib::NativeCallbackDispatcher*  panda::websocket::server::Connection::stream_error_callback() {
    const char* CLASS = "Panda::Lib::NativeCallbackDispatcher";

    function<SV*(shared_ptr<panda::websocket::BaseConnection>)> conn_caster = [](shared_ptr<panda::websocket::BaseConnection> base) {
        auto c = panda::dynamic_pointer_cast<panda::websocket::server::Connection>(base);
        return sv_2mortal(typemap_outcast<panda::websocket::server::Connection*, const char* CLASS>(c, "Panda::WebSocket::Server::Connection"));
    };
    function<SV*(const panda::event::StreamError&)> err_caster = [](const panda::event::StreamError& err) {
        return sv_2mortal(error_sv(err));
    };

    RETVAL = NativeCallbackDispatcher::create(THIS->stream_error_callback,
                                              std::make_tuple(conn_caster, nullptr),
                                              std::make_tuple(err_caster, nullptr));
}


void panda::websocket::server::Connection::DESTROY () {}
